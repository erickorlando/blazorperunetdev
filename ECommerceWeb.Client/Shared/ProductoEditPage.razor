@using ECommerceWeb.Shared.Request
@inject SweetAlertService Swal

<h3>Producto</h3>

<EditForm Model="Producto" OnValidSubmit="Grabar">
    <DataAnnotationsValidator />
    
    <div class="row mb-3">
        <div class="col">
            <label class="col-sm-2 form-label" for="nombre">Nombre:</label>
            <div class="col-sm-4">
                <InputText @bind-Value="Producto.Nombre" id="nombre" class="form-control" />
                <ValidationMessage For="() => Producto.Nombre" />
            </div>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col">
            <label class="col-sm-2 form-label" for="nombre">Descripcion:</label>
            <div class="col-sm-4">
                <InputText @bind-Value="Producto.Descripcion" id="descrpcion" class="form-control" />
                <ValidationMessage For="() => Producto.Descripcion" />
            </div>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col">
            <label class="col-sm-2 form-label" for="precioUnitario">Precio Unitario:</label>
            <div class="col-sm-2">
                <InputNumber @bind-Value="Producto.PrecioUnitario" id="precioUnitario" class="form-control" />
                <ValidationMessage For="() => Producto.PrecioUnitario" />
            </div>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col">
            <label class="col-sm-2 form-label" for="categoria">Categoria:</label>
            <div class="col-sm-4">
                <InputSelect @bind-Value="Producto.CategoriaId" id="categoria" class="form-select">
                    <option>-Seleccione Categoria</option>
                    @foreach (var item in Categorias)
                    {
                        <option value="@item.Id">@item.Nombre</option>
                    }
                </InputSelect>
            </div>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col">
            <label class="col-sm-2 form-label" for="categoria">Marca:</label>
            <div class="col-sm-4">
                <InputSelect @bind-Value="Producto.MarcaId" id="marca" class="form-select">
                    <option>-Seleccione Marca</option>
                    @foreach (var item in Marcas)
                    {
                        <option value="@item.Id">@item.Nombre</option>
                    }
                </InputSelect>
            </div>
        </div>
    </div>
    <div class="card">
        <div class="card-body">
            @if (Producto.Base64Imagen is not null)
            {
                <div style="margin: 10px">
                    <img src="data:image/jpeg;base64,@Producto.Base64Imagen" alt="@Producto.Nombre" style="width: 400px"/>
                </div>
            }
            else
            {
                <img src="@Producto.UrlImagen" alt="@Producto.Nombre" style="width: 400px" />
            }
        </div>
        <div class="card-footer">
            <InputFile accept="image/png, image/jpeg, image/webp" style="display: none" OnChange="OnFileUploaded" id="file" />
            <label for="file" class="btn btn-secondary"><i class="bi bi-camera me-1"></i>IMAGEN</label>
        </div>
    </div>
    
    <ValidationSummary />
    
    <button type="submit" class="btn btn-primary"><i class="bi bi-floppy me-1"></i>Grabar</button>
    <button type="reset" class="btn btn-danger"><i class="bi bi-eraser me-1"></i>Limpiar</button>

</EditForm>


@code {

    [EditorRequired]
    [Parameter]
    public ICollection<CategoriaDto> Categorias { get; set; } = new List<CategoriaDto>();

    [Parameter]
    public ICollection<MarcaDto> Marcas { get; set; } = new List<MarcaDto>();

    [Parameter]
    public ProductoDtoRequest Producto { get; set; } = new ProductoDtoRequest();

    [Parameter]
    public EventCallback OnGrabar { get; set; }

    private async Task Grabar()
    {
        await OnGrabar.InvokeAsync();
    }

    private async Task OnFileUploaded(InputFileChangeEventArgs e)
    {
        try
        {
            var imagen = e.File;
            var buffer = new byte[imagen.Size];
            var _ = await imagen.OpenReadStream().ReadAsync(buffer);

            Producto.Base64Imagen = Convert.ToBase64String(buffer);
            Producto.NombreArchivo = imagen.Name;
            Producto.UrlImagen = null;
        }
        catch (Exception ex)
        {
            await Swal.FireAsync("Error de Archivo", ex.Message);
        }
    }
}