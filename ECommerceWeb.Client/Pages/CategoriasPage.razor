@page "/categorias"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject SweetAlertService Swal

<PageTitle>Categorias</PageTitle>

<h3>Categorias</h3>

<button type="button" class="btn btn-primary" @onclick="Cargar"><i class="bi bi-arrow-clockwise me-1"></i>Cargar datos</button>
<NavLink class="btn btn-success" href="categorias/crear"><i class="bi bi-patch-plus me-1"></i>Agregar</NavLink>

@if (Mostrar)
{

    @if (Categorias is null)
    {
        <p class="alert alert-warning">Cargando....</p>
    }
    else if (Categorias.Count == 0)
    {
        <p class="alert alert-info">No se encontró datos</p>
    }
    else
    {
        <table class="table table-bordered table-hover mt-4">
            <thead>
                <tr class="table-primary">
                    <th>Id</th>
                    <th>Nombre</th>
                    <th>Comentarios</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Categorias)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.Nombre</td>
                        <td>@item.Comentarios</td>
                        <td>
                            <AuthorizeView Roles="@Constantes.RolAdministrador">
                                <Authorized>
                                    <button class="btn btn-secondary" @onclick="() => Editar(item.Id)"><i class="bi bi-pencil"></i></button>
                                    <button class="btn btn-danger" @onclick="() => Eliminar(item.Id)"><i class="bi bi-trash3-fill"></i></button>        
                                </Authorized>
                            </AuthorizeView>
                            
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

}

@code {

    public ICollection<CategoriaDto>? Categorias { get; set; }

    public bool Mostrar { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Cargar();
    }

    private async Task Cargar()
    {
        try
        {
            Mostrar = true;

            var response = await HttpClient.GetFromJsonAsync<ICollection<CategoriaDto>>("api/Categorias");
            if (response != null)
            {
                Categorias = response;
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
    }

    private void Editar(int id)
    {
        NavigationManager.NavigateTo($"/categorias/editar/{id}");
    }

    private async Task Eliminar(int id)
    {
        var result = await Swal.FireAsync(new SweetAlertOptions("Desea eliminar el registro?")
        {
            Title = "Eliminar",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true
        });

        if (result.IsConfirmed)
        {
            await HttpClient.DeleteAsync($"api/Categorias/{id}");
            await Cargar();
        }
    }
}